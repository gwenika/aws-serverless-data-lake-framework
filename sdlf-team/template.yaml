AWSTemplateFormatVersion: "2010-09-09"
Description: Resources to be created to manage a team

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pOrganizationName:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pDomain}}"
  pAnalyticsBucket:
    Description: The analytics bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/AnalyticsBucket}}"
  pCentralBucket:
    Description: The central bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/CentralBucket}}"
  pAthenaBucket:
    Description: S3 Athena bucket
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/AthenaBucket
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pArtifactsBucket:
    Description: The artifactory bucket used by CodeBuild and CodePipeline
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/ArtifactsBucket}}"
#  pSNSNotificationsEmail:
#    Description: Email address for SNS notifications
#    Type: String
#    Default: nobody@amazon.com
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pTeamName:
    Description: Name of the team (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,12}"
  pLakeFormationDataAccessRole:
    Type: String
    Default: "{{resolve:ssm:/SDLF/IAM/LakeFormationDataAccessRoleArn}}"

Conditions:
  CreateMultipleBuckets:
    !Not [!Equals [!Ref pCentralBucket, !Ref pAnalyticsBucket]]

Resources:
  ######## KMS #########
  rKMSInfraKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: !Sub ${pTeamName} Infrastructure KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pTeamName}-infra-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com

  rKMSInfraKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/sdlf-${pTeamName}-kms-infra-key
      TargetKeyId: !Ref rKMSInfraKey

  rKMSDataKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      Description: !Sub ${pTeamName} Data KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub sdlf-${pTeamName}-data-key-policy
        Statement:
          - Sid: Allow administration of the key
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Resource: "*"
          - Sid: Allow Lake Formation permissions
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Effect: Allow
            Principal:
              AWS: !Ref pLakeFormationDataAccessRole
            Resource: "*"

  rKMSDataKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/sdlf-${pTeamName}-kms-data-key
      TargetKeyId: !Ref rKMSDataKey

  rScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: !Sub sdlf-${pTeamName}

  rGlueSecurityConfiguration:
    Type: AWS::Glue::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pTeamName}-glue-security-config
      EncryptionConfiguration:
        CloudWatchEncryption:
          CloudWatchEncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        JobBookmarksEncryption:
          JobBookmarksEncryptionMode: CSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        S3Encryptions:
          - S3EncryptionMode: SSE-KMS
            KmsKeyArn: !GetAtt rKMSDataKey.Arn

  rEMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pTeamName}-emr-security-config
      SecurityConfiguration: !Sub |
        {
          "EncryptionConfiguration": {
            "EnableInTransitEncryption" : false,
            "EnableAtRestEncryption" : true,
            "AtRestEncryptionConfiguration" : {
              "S3EncryptionConfiguration" : {
                "EncryptionMode" : "SSE-KMS",
                "AwsKmsKey": "${rKMSDataKey}"
              },
              "LocalDiskEncryptionConfiguration" : {
                "EncryptionKeyProviderType" : "AwsKms",
                "AwsKmsKey" : "${rKMSDataKey}",
                "EnableEbsEncryption" : true
              }
            }
          },
          "InstanceMetadataServiceConfiguration":{
            "MinimumInstanceMetadataServiceVersion": 2,
            "HttpPutResponseHopLimit": 1
          }
        }

  ######## SSM #########
  rKMSInfraKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/${pTeamName}/InfraKeyId
      Type: String
      Value: !GetAtt rKMSInfraKey.Arn
      Description: !Sub Arn of the ${pTeamName} KMS infrastructure key
  rKMSDataKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/${pTeamName}/DataKeyId
      Type: String
      Value: !GetAtt rKMSDataKey.Arn
      Description: !Sub Arn of the ${pTeamName} KMS data key

  rScheduleGroupSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/EventBridge/${pTeamName}/ScheduleGroupName
      Type: String
      Value: !Ref rScheduleGroup
      Description: !Sub Name of the ${pTeamName} schedule group
  #### END KMS STACK

  ######## IAM #########
  rTeamIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F5
            reason: Condition Applied
    Properties:
      Path: !Sub /sdlf/${pTeamName}/ # keep this path for the team's permissions boundary policy only
      Description: Team Permissions Boundary IAM policy. Add/remove permissions based on company policy and associate it to federated role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowConsoleListBuckets
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: !Sub arn:${AWS::Partition}:s3:::*
          - Sid: AllowTeamBucketList
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              [
                !Sub "arn:${AWS::Partition}:s3:::${pArtifactsBucket}",
                !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}",
                !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}",
                !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}",
              ]
          - Sid: AllowTeamPrefixActions
            Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/${pTeamName}/*
              - !If [
                  CreateMultipleBuckets,
                  !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/${pTeamName}/*",
                  !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/raw/${pTeamName}/*",
                ]
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/pre-stage/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/stage/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/post-stage/${pTeamName}/*
              - !If [
                  CreateMultipleBuckets,
                  !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pTeamName}/*",
                  !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/analytics/${pTeamName}/*",
                ]
          - Sid: AllowFullCodeCommitOnTeamRepositories
            Effect: Allow
            Action:
              - codecommit:*
            Resource:
              - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
          - Sid: AllowTeamKMSDataKeyUsage
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt rKMSDataKey.Arn
              - !GetAtt rKMSInfraKey.Arn
          - Sid: AllowSSMGet
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Sid: AllowOctagonDynamoAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Sid: AllowSQSManagement
            Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ListQueues
              - sqs:ListDeadLetterSourceQueues
              - sqs:ListQueueTags
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - glue:StartCrawler
            Resource:
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - glue:GetJobRun
              - glue:GetJobRuns
              - glue:StartJobRun
            Resource:
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/${pOrganizationName}-${pDomain}-${pEnvironment}-${pTeamName}-*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
          - Sid: AllowCloudWatchLogsReadOnlyAccess
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/jobs/sdlf-${pTeamName}-*
          - Sid: AllowCloudFormationReadOnlyAccess
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStackResources
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack:sdlf-${pTeamName}:*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-*

  rDatalakeCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-glue-crawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*/*
                  - !Sub arn:${AWS::Partition}:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::crawler-public*
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:ListObjectsV2
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:PutObjectVersion
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pCentralBucket}/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pCentralBucket}/raw/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/stage/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/pre-stage/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/post-stage/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/analytics/${pTeamName}/*
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:CreateGrant
                Resource:
                  - !GetAtt rKMSInfraKey.Arn
                  - !GetAtt rKMSDataKey.Arn

  ####### SSM #######
  rTeamIAMManagedPolicySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/TeamPermissionsBoundary
      Type: String
      Value: !Ref rTeamIAMManagedPolicy
      Description: The permissions boundary IAM Managed policy for the team
  rDatalakeCrawlerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/CrawlerRoleArn
      Type: String
      Value: !GetAtt rDatalakeCrawlerRole.Arn
      Description: The ARN of the Crawler role

  ######## SNS #########
  rSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub sdlf-${pTeamName}-notifications
      KmsMasterKeyId: !GetAtt rKMSInfraKey.Arn

  rSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub sdlf-${pTeamName}-notifications
        Version: "2012-10-17"
        Statement:
          - Sid: !Sub sdlf-${pTeamName}-notifications
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref rSNSTopic
      Topics:
        - !Ref rSNSTopic

  rDatasetsDynamodbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-dynamodb-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Pipelines-${pEnvironment}
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Datasets-${pEnvironment}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:DeleteLogGroup
                  - logs:TagLogGroup
                  - logs:PutRetentionPolicy
                  - logs:DeleteRetentionPolicy
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-datasets-dynamodb
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-datasets-dynamodb:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Pipelines/${pTeamName}
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Datasets/${pTeamName}

  rDatasetsDynamodbLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub Creates/updates DynamoDB entries for ${pTeamName} datasets
      FunctionName: !Sub sdlf-${pTeamName}-datasets-dynamodb
      Handler: index.lambda_handler
      MemorySize: 192
      Role: !GetAtt rDatasetsDynamodbLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
      Environment:
        Variables:
          TEAM_NAME: !Ref pTeamName
          ENVIRONMENT: !Ref pEnvironment
      Code:
        ZipFile: |
          import logging
          import os

          import boto3
          import json

          from boto3.dynamodb.types import TypeSerializer

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.client("dynamodb")
          ssm = boto3.client("ssm")
          codepipeline = boto3.client("codepipeline")

          def delete_dynamodb_dataset_entry(table_name, team_name, dataset_name):
              response = dynamodb.delete_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{dataset_name}"}},
              )
              return response

          def create_dynamodb_dataset_entry(table_name, team_name, dataset_name, pipeline_details):
              pipeline_details_dynamodb_json = TypeSerializer().serialize(pipeline_details)
              logger.info("PIPELINE DETAILS DYNAMODB JSON: %s", pipeline_details_dynamodb_json)
              response = dynamodb.update_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{dataset_name}"}},
                  ExpressionAttributeNames={
                      "#P": "pipeline",
                      "#MXIP": "max_items_process",
                      "#MIP": "min_items_process",
                      "#V": "version",
                  },
                  ExpressionAttributeValues={
                      ":p": pipeline_details_dynamodb_json,
                      ":mxip": {"M":{"stage_b": {"N": "100"},"stage_c": {"N": "100"}}}, # todo replace with a nested "pipeline_modifiers" field (half done)
                      ":mip": {"M":{"stage_b": {"N": "1"},"stage_c": {"N": "1"}}},
                      ":v": {"N": "1"},
                  },
                  UpdateExpression="SET #P = :p, #MXIP = :mxip, #MIP = :mip, #V = :v",
                  ReturnValues="UPDATED_NEW",
              )
              return response


          def lambda_handler(event, context):
              try:
                  environment = os.getenv("ENVIRONMENT")
                  team_name = os.getenv("TEAM_NAME")
                  table = f"octagon-Datasets-{environment}"

                  paginator = ssm.get_paginator("get_parameters_by_path")
                  datasets_pages = paginator.paginate(
                      Path=f"/SDLF/Datasets/{team_name}",
                      PaginationConfig={"MaxItems": 30},
                  )

                  for datasets_page in datasets_pages:
                    for dataset in datasets_page["Parameters"]:
                        dataset_name = dataset["Name"].split("/")[-1]
                        logger.info("DATASET SSM CONTENT: %s", dataset["Value"])
                        dataset_pipeline_details = json.loads(dataset["Value"])
                        create_dynamodb_dataset_entry(table, team_name, dataset_name, dataset_pipeline_details)
                        logger.info(
                            f"{team_name}-{dataset_name} DynamoDB Dataset entry created"
                        )

                  logger.info(
                      "INFO: Entries for datasets that no longer exist are not removed from DynamoDB"
                  )
              except Exception as e:
                  message = "Function exception: " + str(e)
                  raise

              return "Success"

  rPermissionForDatasetsEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rDatasetsDynamodbLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rDatasetsDynamodbTriggerEventRule.Arn

  rDatasetsDynamodbTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run Datasets DynamoDB update"
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        resources:
          - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-datasets-${pEnvironment}
        detail:
          stack-id:
            - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-datasets-${pEnvironment}
          status-details:
            status:
            - CREATE_COMPLETE
            - UPDATE_COMPLETE
      Targets:
        - Arn: !GetAtt rDatasetsDynamodbLambda.Arn
          Id: !Sub sdlf-${rDatasetsDynamodbLambda}-trigger

  rPipelinesDynamodbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-dynamodb-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Pipelines-${pEnvironment}
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Datasets-${pEnvironment}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:DeleteLogGroup
                  - logs:TagLogGroup
                  - logs:PutRetentionPolicy
                  - logs:DeleteRetentionPolicy
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-pipelines-dynamodb
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-pipelines-dynamodb:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Pipelines/${pTeamName}
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Datasets/${pTeamName}

  rPipelinesDynamodbLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub Creates/updates DynamoDB entries for ${pTeamName} pipelines
      FunctionName: !Sub sdlf-${pTeamName}-pipelines-dynamodb
      Handler: index.lambda_handler
      MemorySize: 192
      Role: !GetAtt rPipelinesDynamodbLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
      Environment:
        Variables:
          TEAM_NAME: !Ref pTeamName
          ENVIRONMENT: !Ref pEnvironment
      Code:
        ZipFile: |
          import logging
          import os

          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.client("dynamodb")
          ssm = boto3.client("ssm")
          codepipeline = boto3.client("codepipeline")

          def delete_dynamodb_pipeline_entry(table_name, team_name, pipeline_name, stage_name):
              response = dynamodb.delete_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{pipeline_name}-{stage_name}"}},
              )
              return response


          def create_dynamodb_pipeline_entry(
              table_name, team_name, pipeline_name, stage_name
          ):
              response = dynamodb.update_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{pipeline_name}-{stage_name}"}},
                  ExpressionAttributeNames={
                      "#T": "type",
                      "#S": "status",
                      "#V": "version",
                  },
                  ExpressionAttributeValues={
                      ":t": {
                          "S": "TRANSFORMATION",
                      },
                      ":s": {"S": "ACTIVE"},
                      ":v": {"N": "1"},
                  },
                  UpdateExpression="SET #T = :t, #S = :s, #V = :v",
                  ReturnValues="UPDATED_NEW",
              )
              return response


          def lambda_handler(event, context):
              try:
                  environment = os.getenv("ENVIRONMENT")
                  team_name = os.getenv("TEAM_NAME")
                  table = f"octagon-Pipelines-{environment}"

                  paginator = ssm.get_paginator("get_parameters_by_path")
                  stages_pages = paginator.paginate(
                      Path=f"/SDLF/Pipelines/{team_name}",
                      Recursive=True,
                      PaginationConfig={"MaxItems": 30},
                  )
                  for stages_page in stages_pages:
                    for stage in stages_page["Parameters"]:
                        pipeline_name = stage["Name"].split("/")[-2]
                        stage_name = stage["Name"].split("/")[-1]
                        create_dynamodb_pipeline_entry(
                            table, team_name, pipeline_name, stage_name
                        )
                        logger.info(
                            f"{team_name}-{pipeline_name}-{stage_name} DynamoDB Pipeline entry created"
                        )

                  logger.info(
                      "INFO: Entries for stages that no longer exist are *not* removed from DynamoDB"
                  )
              except Exception as e:
                  message = "Function exception: " + str(e)
                  raise

              return "Success"

  rPermissionForPipelinesEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rPipelinesDynamodbLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rPipelinesDynamodbTriggerEventRule.Arn

  rPipelinesDynamodbTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run Pipelines DynamoDB update"
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        resources:
          - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-pipelines-${pEnvironment}
        detail:
          stack-id:
            - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-pipelines-${pEnvironment}
          status-details:
            status:
            - CREATE_COMPLETE
            - UPDATE_COMPLETE
      Targets:
        - Arn: !GetAtt rPipelinesDynamodbLambda.Arn
          Id: !Sub sdlf-${rPipelinesDynamodbLambda}-trigger

  ######## SSM #########
  rSNSTopicSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/SNS/${pTeamName}/Notifications
      Type: String
      Value: !Ref rSNSTopic
      Description: The ARN of the team-specific SNS Topic

  ######## LAKEFORMATION PERMISSIONS #########
  rCentralTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/${pTeamName}/",
              !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/raw/${pTeamName}/",
            ]

  rStagePreTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}/pre-stage/${pTeamName}/",
              !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/pre-stage/${pTeamName}/",
            ]

  rStagePostTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}/post-stage/${pTeamName}/",
              !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/post-stage/${pTeamName}/",
            ]

  rAnalyticsTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pTeamName}/",
              !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}/analytics/${pTeamName}/",
            ]

  rAthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Description: !Sub Athena workgroup for team ${pTeamName}
      Name: !Sub sdlf-${pTeamName}
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        EngineVersion:
          SelectedEngineVersion: Athena engine version 3
          EffectiveEngineVersion: Athena engine version 3
        PublishCloudWatchMetricsEnabled: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_KMS
            KmsKey: !GetAtt rKMSDataKey.Arn
          OutputLocation: !Sub s3://${pAthenaBucket}/${pTeamName}

  rAthenaWorkgroupSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Athena/${pTeamName}/WorkgroupName
      Type: String
      Value: !Ref rAthenaWorkgroup
      Description: The name of the Athena workgroup

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
